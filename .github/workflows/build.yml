name: Build
on: [push, pull_request]

jobs:
  linter:
    name: linter
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install Required Python Modules
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Commit Lint
        run: |
          gitlint

  docs:
    name: docs
    runs-on: ubuntu-18.04
    env:
      BUILD: docs
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install Required Python Modules
        run: |
          pip3 install Sphinx sphinx_rtd_theme
          pip3 install -r requirements-docs.txt
      - name: Run Sphinx Build
        run: |
          sphinx-build -b html db/docs/source db/docs

  db_test:
    name: db_test
    runs-on: ubuntu-18.04
    env:
      BUILD: db
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: github
      PGPASSWORD: github
      PGDATABASE: nz-buildings-pgtap-db
      APT: "apt-get -o Dpkg::Progress=0 -o Dpkg::Use-Pty=0" # Make apt non-interactive by default, and not showing progress
      APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE: 1 # Avoid warnings on apt-key usage
    strategy:
      matrix:
        postgres: [9.3, 14]
        include:
          - postgres: 9.3
            postgres_repo: deb https://apt-archive.postgresql.org/pub/repos/apt bionic-pgdg-archive main
            postgis: 2.4
            sqitch: 1.2.1
          - postgres: 14
            postgres_repo: deb https://apt.postgresql.org/pub/repos/apt bionic-pgdg main
            postgis: 3
            sqitch: 1.2.1
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Add repositories
        run: |
          sudo ${APT} -qq purge \
              libpq5 \
              libpq-dev \
              *php* \
              postgresql \
              postgresql-client-common \
              postgresql-common
          sudo rm -rf /var/lib/postgresql
          sudo ${APT} install curl ca-certificates gnupg
          distro=`lsb_release -cs`
          # Enable fetching packages from apt.postgresql repository
          curl -s https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          echo "${{matrix.postgres_repo}}" | sudo tee /etc/apt/sources.list.d/pgdg.list
      - name: Install dependencies
        run: |
          sudo ${APT} -qq update
          sudo ${APT} -qq install \
            postgresql-${{ matrix.postgres }} \
            postgresql-${{ matrix.postgres }}-pgtap \
            postgresql-${{ matrix.postgres }}-postgis-${{ matrix.postgis }} \
            postgresql-${{ matrix.postgres }}-postgis-${{ matrix.postgis }}-scripts \
            libtap-parser-sourcehandler-pgtap-perl \
            libdbd-pg-perl \
            perl \
            perl-doc \
            build-essential \
            cpanminus
          sudo cpanm --notest DWHEELER/App-Sqitch-v${{matrix.sqitch}}.tar.gz
      - name: Create database
        run: |
          sudo -u postgres createuser -s ${{env.PGUSER}}
          sudo -u postgres psql -c "ALTER USER ${{env.PGUSER}} WITH PASSWORD '${{env.PGPASSWORD}}';"
          sudo -u postgres createdb --owner=${{env.PGUSER}} ${{env.PGDATABASE}}
          psql -a -c 'CREATE EXTENSION intarray;'
          psql -a -c 'CREATE EXTENSION postgis;'
          psql -a -c 'CREATE EXTENSION pgtap;'
          psql -a -f create_test_admin_bdys_schema.sql
          psql -a -f db/admin_bdys.sql
          psql -a -f create_test_aerial_schema.sql
          psql -a -f db/aerial_lds.sql
        working-directory: ./db/tests/testdata
      - name: Sqitch deploy
        run: sqitch deploy --verify
        working-directory: ./db/sql
      - name: Sqitch revert
        run: sqitch revert -y
        working-directory: ./db/sql
      - name: Sqitch deploy again
        run: sqitch deploy --verify
        working-directory: ./db/sql
      - name: Add test data
        run: |
          psql -a -f buildings_reference.sql
          psql -a -f buildings_common.sql
          psql -a -f buildings.sql
          psql -a -f buildings_bulk_load.sql
          psql -a -f buildings_lds.sql
          psql -a -f update_sequences.sql
          psql -c 'REFRESH MATERIALIZED VIEW buildings_reference.territorial_authority_grid;' 
        working-directory: ./db/tests/testdata/db
      - name: Run pgTAP tests
        run: pg_prove db/tests/

  unittest:
    name: unittest
    needs: [linter, docs, db_test]
    runs-on: ubuntu-18.04
    env:
      DOCKER_COMPOSE_VERSION: 1.7.1
    steps:
      - uses: actions/checkout@v1
      - name: Run Docker Compose Up
        run: |
          docker-compose up -d
      - name: Install Required Python Modules
        run: |
          docker-compose exec -T qgis-testing-environment sh -c "pip3 install -r tests_directory/requirements-dev.txt"
      - name: Move Config File
        run: |
          docker-compose exec -T qgis-testing-environment sh -c "mkdir -p /root/.local/share/QGIS/QGIS3/profiles/default/buildings"
          docker-compose exec -T qgis-testing-environment sh -c "cp tests_directory/buildings/tests/pg_config_test.ini /root/.local/share/QGIS/QGIS3/profiles/default/buildings/pg_config.ini"
      - name: Setup Plugin
        run: |
          docker-compose exec -T qgis-testing-environment sh -c "qgis_setup.sh buildings"
      - name: Create Symlink
        run: |
          docker-compose exec -T qgis-testing-environment sh -c "ln -s /tests_directory/buildings /root/.local/share/QGIS/QGIS3/profiles/default/python/plugins/buildings"
      - name: Setup DB
        run: |
          docker-compose exec -T qgis-testing-environment sh -c "cd tests_directory && python3 install.py"
      - name: Run QGIS Test Runner
        run: |
          docker-compose exec -T qgis-testing-environment sh -c "cd tests_directory && sh testrunner.sh buildings.tests.test_runner.run_test_modules"

  deploy:
    name: deploy
    if: contains(github.ref, 'refs/tags/')
    needs: [unittest]
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2-beta
        with:
          ref: ${{ github.ref }}

      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          echo ${{ github.ref }}
          echo ${{ github.repository }}
          zip -r buildings.zip buildings
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            See [${CHANGELOG} ${{ github.ref }}](https://github.com/linz/nz-buildings/blob/master/${CHANGELOG}#$(echo ${{ github.ref }} | sed -e 's/[a-zA-Z\.]//g')) for detailed release information.
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./buildings.zip
          asset_name: buildings.zip
          asset_content_type: application/zip
      - name: Upload To LINZ QGIS Plugin Repository in AWS
        run: |
          curl -X POST -H 'Content-Type: application/octet-stream' -H "authorization: bearer ${{ secrets.PLUGIN_REPO_AUTH }}" --data-binary @buildings.zip https://plugins.qgis.linz.govt.nz/v1/plugin/buildings
