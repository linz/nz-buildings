name: Sqitch Checks

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  sqitch-tests:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - {postgres: "10", postgis: "2.5"}
          - {postgres: "14", postgis: "3.2"}

    services:
      postgres:
        image: postgis/postgis:${{ matrix.postgres }}-${{ matrix.postgis }}
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # Checks to see if the PostgreSQL database is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Install Sqitch 
        run: |
          sudo apt-get install -y libdbd-pg-perl build-essential perl perl-doc
          sudo apt-get install -y cpanminus
          sudo cpanm --notest DWHEELER/App-Sqitch-v${{ env.SQITCH_VERSION }}.tar.gz
        env:
          SQITCH_VERSION: 1.2.1

      - name: Check Sqitch version
        run: sqitch --version

      - name: Database setup
        run: |
          psql -d ${{ env.TEST_DB }} -c 'CREATE EXTENSION intarray;' 
          psql -d ${{ env.TEST_DB }} -a -f create_test_admin_bdys_schema.sql
          psql -d ${{ env.TEST_DB }} -a -f db/admin_bdys.sql
          psql -d ${{ env.TEST_DB }} -a -f create_test_aerial_schema.sql
          psql -d ${{ env.TEST_DB }} -a -f db/aerial_lds.sql
        working-directory: ./db/tests/testdata
        env:
          TEST_DB: postgresql://user@127.0.0.1/test_db
          PGPASSWORD: password

      - name: Sqitch deploy
        run: sqitch deploy --verify db:postgresql://user@127.0.0.1/test_db
        working-directory: ./db/sql
        env:
          PGPASSWORD: password

      - name: Sqitch revert
        run: sqitch revert -y db:postgresql://user@127.0.0.1/test_db
        working-directory: ./db/sql
        env:
          PGPASSWORD: password
          
      - name: Sqitch deploy again
        run: sqitch deploy --verify db:postgresql://user@127.0.0.1/test_db
        working-directory: ./db/sql
        env:
          PGPASSWORD: password
          
      - name: Add test data
        run: |
          psql -d ${{ env.TEST_DB }} -a -f buildings_reference.sql
          psql -d ${{ env.TEST_DB }} -a -f buildings_common.sql
          psql -d ${{ env.TEST_DB }} -a -f buildings.sql
          psql -d ${{ env.TEST_DB }} -a -f buildings_bulk_load.sql
          psql -d ${{ env.TEST_DB }} -a -f buildings_lds.sql
          psql -d ${{ env.TEST_DB }} -a -f update_sequences.sql
          psql -d ${{ env.TEST_DB }} -c 'REFRESH MATERIALIZED VIEW buildings_reference.territorial_authority_grid;' 
        working-directory: ./db/tests/testdata/db
        env:
          TEST_DB: postgresql://user@127.0.0.1/test_db
          PGPASSWORD: password

      - name: Install pgTAP 
        run: |
          sudo apt-get install -y curl ca-certificates gnupg
          curl -s https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          sudo apt-get install -y libtap-parser-sourcehandler-pgtap-perl postgresql-${{ matrix.postgres }}-pgtap
          psql -d ${{ env.TEST_DB }} -a -c 'CREATE EXTENSION pgtap;'
        env:
          TEST_DB: postgresql://user@127.0.0.1/test_db
          PGPASSWORD: password

      - name: Run pgTAP tests
        run: pg_prove -d postgresql://user@127.0.0.1/test_db db/tests/
        env:
          PGPASSWORD: password
